// <auto-generated />
using AmusementPark.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmusementPark.Migrations
{
    [DbContext(typeof(ParkContext))]
    partial class ParkContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("AmusementPark.Models.DuckFishing", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaintenancePrice")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisitorInAttraction")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("DuckFishing");
                });

            modelBuilder.Entity("AmusementPark.Models.FoodShop", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaintenancePrice")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("VisitorInAttraction")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("FoodShop");
                });

            modelBuilder.Entity("AmusementPark.Models.GiftShop", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaintenancePrice")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("VisitorInAttraction")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("GiftShop");
                });

            modelBuilder.Entity("AmusementPark.Models.HauntedHouse", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaintenancePrice")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisitorInAttraction")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("HauntedHouse");
                });

            modelBuilder.Entity("AmusementPark.Models.Park", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Budget")
                        .HasColumnType("REAL");

                    b.Property<string>("GridParkJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventoryBuildingsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlacedBuildingJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalVisitors")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitorInPark")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitorsEntry")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitorsOut")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("AmusementPark.Models.RollerCoaster", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaintenancePrice")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisitorInAttraction")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("RollerCoaster");
                });

            modelBuilder.Entity("AmusementPark.Models.DuckFishing", b =>
                {
                    b.OwnsOne("AmusementPark.Models.Position", "Ordinal", b1 =>
                        {
                            b1.Property<string>("DuckFishingName")
                                .HasColumnType("TEXT");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DuckFishingName");

                            b1.ToTable("DuckFishing");

                            b1.WithOwner()
                                .HasForeignKey("DuckFishingName");
                        });

                    b.Navigation("Ordinal")
                        .IsRequired();
                });

            modelBuilder.Entity("AmusementPark.Models.FoodShop", b =>
                {
                    b.OwnsOne("AmusementPark.Models.Position", "Ordinal", b1 =>
                        {
                            b1.Property<string>("FoodShopName")
                                .HasColumnType("TEXT");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("FoodShopName");

                            b1.ToTable("FoodShop");

                            b1.WithOwner()
                                .HasForeignKey("FoodShopName");
                        });

                    b.Navigation("Ordinal")
                        .IsRequired();
                });

            modelBuilder.Entity("AmusementPark.Models.GiftShop", b =>
                {
                    b.OwnsOne("AmusementPark.Models.Position", "Ordinal", b1 =>
                        {
                            b1.Property<string>("GiftShopName")
                                .HasColumnType("TEXT");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("GiftShopName");

                            b1.ToTable("GiftShop");

                            b1.WithOwner()
                                .HasForeignKey("GiftShopName");
                        });

                    b.Navigation("Ordinal")
                        .IsRequired();
                });

            modelBuilder.Entity("AmusementPark.Models.HauntedHouse", b =>
                {
                    b.OwnsOne("AmusementPark.Models.Position", "Ordinal", b1 =>
                        {
                            b1.Property<string>("HauntedHouseName")
                                .HasColumnType("TEXT");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("HauntedHouseName");

                            b1.ToTable("HauntedHouse");

                            b1.WithOwner()
                                .HasForeignKey("HauntedHouseName");
                        });

                    b.Navigation("Ordinal")
                        .IsRequired();
                });

            modelBuilder.Entity("AmusementPark.Models.RollerCoaster", b =>
                {
                    b.OwnsOne("AmusementPark.Models.Position", "Ordinal", b1 =>
                        {
                            b1.Property<string>("RollerCoasterName")
                                .HasColumnType("TEXT");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("RollerCoasterName");

                            b1.ToTable("RollerCoaster");

                            b1.WithOwner()
                                .HasForeignKey("RollerCoasterName");
                        });

                    b.Navigation("Ordinal")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
